{"version":3,"sources":["components/ToDoForm.js","components/ToDo.js","components/ToDoList.js","App.js","index.js"],"names":["ToDoForm","props","useState","input","setInput","inputRef","useRef","changeHandler","e","target","value","useEffect","current","focus","className","onSubmit","preventDefault","id","Math","floor","random","text","edit","type","placeholder","name","onChange","ref","ToDo","todos","completeToDo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","ToDoList","setTodos","test","newTask","updatedToDos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RA2DeA,MAxDf,SAAkBC,GAAQ,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,KAGjBC,EAAWC,iBAAO,MAElBC,EAAgB,SAACC,GACrBJ,EAASI,EAAEC,OAAOC,QAiBpB,OAdAC,qBAAU,WACRN,EAASO,QAAQC,WAcjB,sBAAMC,UAAU,WAAWC,SAXP,SAACP,GACrBA,EAAEQ,iBACFf,EAAMc,SAAS,CACbE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAGRC,EAAS,KAIT,SACGH,EAAMqB,KACL,qCACE,uBACEC,KAAK,OACLC,YAAY,mBACZd,MAAOP,EACPsB,KAAK,OACLX,UAAU,kBACVY,SAAUnB,EACVoB,IAAKtB,IAEP,wBAAQS,UAAU,mBAAlB,uBAGF,qCACE,uBACES,KAAK,OACLC,YAAY,aACZd,MAAOP,EACPsB,KAAK,OACLX,UAAU,kBACVY,SAAUnB,EACVoB,IAAKtB,IAEP,wBAAQS,UAAU,mBAAlB,4B,OCNKc,MAzCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EACrC9B,mBAAS,CAC/Be,GAAI,KACJP,MAAO,KAHoD,mBACtDY,EADsD,KAChDW,EADgD,KAc7D,OAAIX,EAAKL,GACA,cAAC,EAAD,CAAUK,KAAMA,EAAMP,SATV,SAACL,GACpBsB,EAAWV,EAAKL,GAAIP,GACpBuB,EAAQ,CACNhB,GAAI,KACJP,MAAO,QAQJmB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,sBACEtB,UAAWqB,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKlB,KAApD,SACGkB,EAAKd,MADEc,EAAKlB,IAIf,sBAAKH,UAAU,QAAf,UACE,cAAC,IAAD,CACEA,UAAU,gBACVwB,QAAS,kBAAMP,EAAWI,EAAKlB,OAEjC,cAAC,IAAD,CACEH,UAAU,cACVwB,QAAS,kBAAML,EAAQ,CAAEhB,GAAIkB,EAAKlB,GAAIP,MAAOyB,EAAKd,eAbjDe,OC+BIG,MApDf,WAAqB,IAAD,EACQrC,mBAAS,IADjB,mBACX2B,EADW,KACJW,EADI,KAsClB,OACE,sBAAK1B,UAAU,WAAf,UACE,oBAAIA,UAAU,cAAd,sCACA,cAAC,EAAD,CAAUC,SAtCE,SAACoB,GACf,GAAKA,EAAKd,OAAQ,QAAQoB,KAAKN,EAAKd,MAApC,CAIA,IAAMqB,EAAO,CAAIP,GAAJ,mBAAaN,IAE1BW,EAASE,OAgCP,cAAC,EAAD,CACEb,MAAOA,EACPC,aAhBe,SAACb,GACpB,IAAI0B,EAAed,EAAMK,KAAI,SAACC,GAI5B,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETK,EAASG,IAULZ,WAvBa,SAACd,GAClB,IAAM2B,EAAY,YAAIf,GAAOgB,QAAO,SAACV,GAAD,OAAUA,EAAKlB,KAAOA,KAE1DuB,EAASI,IAqBLZ,WAjCa,SAACc,EAAQC,GACrBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAG5CmB,GAAS,SAACQ,GAAD,OACPA,EAAKd,KAAI,SAACe,GAAD,OAAWA,EAAKhC,KAAO6B,EAASC,EAAWE,eCZ3CC,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.845f6897.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../styles/ToDoForm.scss\";\r\n\r\nfunction ToDoForm(props) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const changeHandler = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"toDoForm\" onSubmit={submitHandler}>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Update your task\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"toDoForm__input\"\r\n            onChange={changeHandler}\r\n            ref={inputRef}\r\n          />\r\n          <button className=\"toDoFrom__button\">Update</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add a task\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"toDoForm__input\"\r\n            onChange={changeHandler}\r\n            ref={inputRef}\r\n          />\r\n          <button className=\"toDoFrom__button\">Add task</button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ToDoForm;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/ToDo.scss\";\r\nimport ToDoForm from \"./ToDoForm\";\r\nimport { AiOutlineCloseCircle, AiOutlineEdit } from \"react-icons/ai\";\r\n\r\nfunction ToDo({ todos, completeToDo, removeTodo, updateTodo }) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <ToDoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeToDo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n\r\n      <div className=\"icons\">\r\n        <AiOutlineCloseCircle\r\n          className=\"icons__delete\"\r\n          onClick={() => removeTodo(todo.id)}\r\n        />\r\n        <AiOutlineEdit\r\n          className=\"icons__edit\"\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/ToDoList.scss\";\r\nimport ToDo from \"./ToDo\";\r\nimport ToDoForm from \"./ToDoForm\";\r\n\r\nfunction ToDoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addTask = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n\r\n    const newTask = [todo, ...todos];\r\n\r\n    setTodos(newTask);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    setTodos((prev) =>\r\n      prev.map((item) => (item.id === todoId ? newValue : item))\r\n    );\r\n  };\r\n\r\n  const removeTodo = (id) => {\r\n    const removeArr = [...todos].filter((todo) => todo.id !== id);\r\n\r\n    setTodos(removeArr);\r\n  };\r\n\r\n  const completeToDo = (id) => {\r\n    let updatedToDos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedToDos);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoList\">\r\n      <h1 className=\"todoList_h1\">What should we do today?</h1>\r\n      <ToDoForm onSubmit={addTask} />\r\n      <ToDo\r\n        todos={todos}\r\n        completeToDo={completeToDo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import \"./App.scss\";\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}